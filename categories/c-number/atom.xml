<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C# | co.de.mon.key]]></title>
  <link href="http://blog.codemonkey.pl/categories/c-number/atom.xml" rel="self"/>
  <link href="http://blog.codemonkey.pl/"/>
  <updated>2014-06-25T06:30:05+02:00</updated>
  <id>http://blog.codemonkey.pl/</id>
  <author>
    <name><![CDATA[malpka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C# Generowanie obiektów z zakresu - Enumerable.Range()]]></title>
    <link href="http://blog.codemonkey.pl/2014/03/11/c-sharp-generowanie-obiektow-z-zakresu/"/>
    <updated>2014-03-11T10:37:13+01:00</updated>
    <id>http://blog.codemonkey.pl/2014/03/11/c-sharp-generowanie-obiektow-z-zakresu</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://i.imgur.com/WURz5K4.png">http://i.imgur.com/WURz5K4.png</a>" width="128" height="128" title="C Sharp" ></p>

<p>Czasami zachodzi potrzeba utworzenia kolekcji liczb/obiektów na podstawie zdefiniowanego zakresu liczbowego.</p>

<p>Zamiast definiowania tablicy oraz używania pętli:</p>

<p>&nbsp;</p>

<p>``` c#
public static List<YearClass> LoadData()
{
  List<YearClass> years = new List<YearClass>();
  for (int i = 2000; i &lt; 2015; i++)</p>

<pre><code>years.Add(new YearClass(i));
</code></pre>

<p>  return years;
}
```</p>

<p>można wykorzystać <code>Enumerable.Range(int, int)</code> <a href="http://msdn.microsoft.com/pl-pl/library/system.linq.enumerable.range%28v=vs.110%29.aspx">link MSDN</a></p>

<p><code>c#
public static List&lt;YearClass&gt; LoadData()
{
 return Enumerable.Range(2000, 15).Select(x =&gt; new YearClass(x)).ToList&lt;YearClass&gt;();
}
</code></p>

<p>Prawda że ładniej? Może nie jest to <a href="http://docs.python.org/2/library/itertools.html">itertools z Pythona</a> ale robi to co trzeba.</p>

<p>Oczywiście metodę można wykorzystać do tworzenia różnego rodzaju ciągów:</p>

<p>``` c#
// ciąg arytmetyczny
var seq1 = Enumerable.Range(0, 5).Select(x => x * 3 + 2).ToList();
// 2, 5, 8, 11, 14</p>

<p>// kwadraty
var seq2 = Enumerable.Range(1, 6).Select(x => x * x).ToList();
// 1, 4, 9, 16, 25, 36</p>

<p>// potęgi dwójki
var seq3 = Enumerable.Range(0, 10).Select(x => (int)Math.Pow(2, x)).ToList();
// 1, 2, 4, 8, 16, 32, 64, 128, 256, 512
```</p>

<p>również znakowych:</p>

<p><code>c#
var percentStrArray = Enumerable.Range(0, 10).Select(x =&gt; (10 * x) + "%" ).ToArray();
// "0%", "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%"
</code></p>

<p>Eksperymentalne pobieranie wszystkich małych liter ASCII wygląda następująco:
<code>c#
var smallASCII = Enumerable.Range((int)'a', (int)'z' - (int)'a' + 1).Select(x =&gt; (char)x).ToArray();
// 'a', 'b', 'c', ..., 'y', 'z'
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1 liner - pobieranie wersji .NET framework dla bibliotek w katalogu]]></title>
    <link href="http://blog.codemonkey.pl/2012/10/08/1-liner-pobieranie-wersji-net-framework-dla-bibliotek-w-kata/"/>
    <updated>2012-10-08T10:41:00+02:00</updated>
    <id>http://blog.codemonkey.pl/2012/10/08/1-liner-pobieranie-wersji-net-framework-dla-bibliotek-w-kata</id>
    <content type="html"><![CDATA[<p>Przydatne, gdy trzeba określić ostateczną wersję frameworka, np do wymagań instalatora.</p>


<p></p>


<p><code>for %p in (*.dll) do @echo %p &amp;&amp; @ildasm.exe %p /metadata[=MDHEADER] /text /noil | grep -E -o "version: v[a-z0-9\.]+"</code></p>


<p>Nie ma grepa na Windowsie? Jak tak można w ogóle pracować... ;)</p>


<p><a href="http://gnuwin32.sourceforge.net/packages/grep.htm">http://gnuwin32.sourceforge.net/packages/grep.htm</a></p>


<p>Przykładowe wyjście:</p>


<p><code>Microsoft.Practices.CompositeUI.dll<br>
version: v2.0.50727<br>
Microsoft.Practices.CompositeUI.WinForms.dll<br>
version: v2.0.50727<br>
Microsoft.Practices.EnterpriseLibrary.Caching.dll<br>
version: v2.0.50727<br>
Microsoft.Practices.EnterpriseLibrary.Common.dll<br>
version: v2.0.50727</code></p>


<p></p>


<p><a href="http://stackoverflow.com/questions/3460982/determine-net-framework-version-for-dll">Źródło inspiracji</a></p>


<p>Oczywiście są również wersje okienkowe, jak wspomniany w odpowiedziach <a href="http://www.jetbrains.com/decompiler/">dotPeek</a>.</p>



]]></content>
  </entry>
  
</feed>

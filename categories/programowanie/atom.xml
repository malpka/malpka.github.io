<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programowanie | co.de.mon.key]]></title>
  <link href="http://blog.codemonkey.pl/categories/programowanie/atom.xml" rel="self"/>
  <link href="http://blog.codemonkey.pl/"/>
  <updated>2014-06-01T18:30:07+02:00</updated>
  <id>http://blog.codemonkey.pl/</id>
  <author>
    <name><![CDATA[malpka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[1 liner - pobieranie wersji .NET framework dla bibliotek w katalogu]]></title>
    <link href="http://blog.codemonkey.pl/2012/10/08/1-liner-pobieranie-wersji-net-framework-dla-bibliotek-w-kata/"/>
    <updated>2012-10-08T10:41:00+02:00</updated>
    <id>http://blog.codemonkey.pl/2012/10/08/1-liner-pobieranie-wersji-net-framework-dla-bibliotek-w-kata</id>
    <content type="html"><![CDATA[<p>Przydatne, gdy trzeba określić ostateczną wersję frameworka, np do wymagań instalatora.</p>


<p></p>


<p><code>for %p in (*.dll) do @echo %p &amp;&amp; @ildasm.exe %p /metadata[=MDHEADER] /text /noil | grep -E -o "version: v[a-z0-9\.]+"</code></p>


<p>Nie ma grepa na Windowsie? Jak tak można w ogóle pracować... ;)</p>


<p><a href="http://gnuwin32.sourceforge.net/packages/grep.htm">http://gnuwin32.sourceforge.net/packages/grep.htm</a></p>


<p>Przykładowe wyjście:</p>


<p><code>Microsoft.Practices.CompositeUI.dll<br>
version: v2.0.50727<br>
Microsoft.Practices.CompositeUI.WinForms.dll<br>
version: v2.0.50727<br>
Microsoft.Practices.EnterpriseLibrary.Caching.dll<br>
version: v2.0.50727<br>
Microsoft.Practices.EnterpriseLibrary.Common.dll<br>
version: v2.0.50727</code></p>


<p></p>


<p><a href="http://stackoverflow.com/questions/3460982/determine-net-framework-version-for-dll">Źródło inspiracji</a></p>


<p>Oczywiście są również wersje okienkowe, jak wspomniany w odpowiedziach <a href="http://www.jetbrains.com/decompiler/">dotPeek</a>.</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dzień Darmowej Dostawy w Polsce - opisy sklepów.]]></title>
    <link href="http://blog.codemonkey.pl/2010/11/18/dzien-darmowej-dostawy-w-polsce-opisy-sklepow/"/>
    <updated>2010-11-18T10:09:00+01:00</updated>
    <id>http://blog.codemonkey.pl/2010/11/18/dzien-darmowej-dostawy-w-polsce-opisy-sklepow</id>
    <content type="html"><![CDATA[<p>Ostatnio dowiedziałem się o akcji <b>Dzień Darmowej Dostawy</b>, która odbędzie się 1 grudnia 2010 r., wzorowanej na amerykańskim Free Shipping Day. Cel jest oczywisty, a szczegółowe informacje są podane na stronie <a href="http://dziendarmowejdostawy.pl/">http://dziendarmowejdostawy.pl/</a>.</p>


<p>Firmy uczestniczące w akcji są wymienione w formie adresów internetowych stron, bez odsyłaczy. Poza bardziej znanymi partnerami akcji jak gram.pl, Vobis, Helion, Komputronik czy Megastore jest sporo sklepów, o których działalności niewiele można powiedzieć po samym adresie internetowym. Parę przykładów - Fnak.pl, DeeZee.pl, Maminek.pl, KissMyKicks.pl czy KolorowaKrowa.pl ! :)</p>


<p>W celu szybkiego sprawdzenia tematyki każdego ze sklepów popełniłem mały skypcik w <b>pythonie</b>, w którym widać łatwość z jaką można wkroczyć w tematykę zwaną <a href="http://en.wikipedia.org/wiki/Web_scraping">Web scraping</a></p>


<p>``` python
import urllib, sys, BeautifulSoup</p>

<p>adresDDD = &ldquo;<a href="http://dziendarmowejdostawy.pl/">http://dziendarmowejdostawy.pl/</a>&rdquo;
soup = BeautifulSoup.BeautifulSoup(urllib.urlopen(adresDDD))</p>

<p>for li in soup.findAll(&lsquo;li&rsquo;):</p>

<pre><code>    try:
            a2 = li.contents[0].strip(" \t\n").decode('utf8')
            print "[http://" + a2+ "]"

            soup2 = BeautifulSoup.BeautifulSoup(urllib.urlopen("http://"+a2))
            try:
                    print unicode(soup2.head.title)
            except:
                    print soup2.head.title
    except:
            continue
</code></pre>

<p>```</p>

<p><br></p>


<p>Na przykładzie widać najprostsze wyciąganie danych za pomocą <a href="http://www.python.org/">pythona</a> i biblioteki <a href="http://www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a>.</p>


<p>Po delikatnym przeformatowaniu w npp można uzyskać coś takiego:</p>


<p><br></p>


<ul>
<li><a href="http://Gram.pl">http://Gram.pl</a> - gram.pl - Recenzje, Zapowiedzi, Newsy, Poradniki, Dema. Gry na PC, PS3, X360.</li>
<li><a href="http://Onepress.pl">http://Onepress.pl</a> - Księgarnia biznesowa Onepress.pl - książki klasy business</li>
<li><a href="http://Rebel.pl">http://Rebel.pl</a> - Sklep z grami REBEL.pl :: Największy polski sklep z grami - gry rpg, gry planszowe, gry karciane i inne</li>
<li><a href="http://Pixers.pl">http://Pixers.pl</a> - Fototapety, Obrazy na ścianę, Plakaty, Naklejki, Zdjęcia na płótnie - najciekawszy sklep w Europie - PIXERS</li>
<li>...</li>
</ul>


<p></p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatyczna zamiana nazw plików i zawartości]]></title>
    <link href="http://blog.codemonkey.pl/2009/10/23/automatyczna-zamiana-nazw-plikow-i-zawartosci/"/>
    <updated>2009-10-23T12:20:00+02:00</updated>
    <id>http://blog.codemonkey.pl/2009/10/23/automatyczna-zamiana-nazw-plikow-i-zawartosci</id>
    <content type="html"><![CDATA[<p>Sytuacja z życia, rozwiązanie do zapamiętania. Bazując na starym projekcje o określonym nazewnictwie plików oraz klas, namespace itd. trzeba stworzyć nowy z całkowicie zmienioną jedną frazą na drugą.</p>


<p>Rozwiązanie</p>


<p>Zamiana zawartości:</p>


<p><code>grep -rl NazwaPierwotna . | xargs sed -i -e 's/NazwaPierwotna/NazwaDocelowa/g'</code></p>


<p>Zmiana nazw plików</p>


<p><code>find . -name "NazwaPierwotna*" -exec rename 's/NazwaPierwotna/NazwaDocelowa/' {} \;</code></p>


<p>To ostatnie wywołać kilka razy</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Applet i zasoby]]></title>
    <link href="http://blog.codemonkey.pl/2007/01/11/applet-i-zasoby/"/>
    <updated>2007-01-11T07:23:00+01:00</updated>
    <id>http://blog.codemonkey.pl/2007/01/11/applet-i-zasoby</id>
    <content type="html"><![CDATA[<p>Jeden ze znajomych miał problem z dołączeniem plików grafiki do appletu.<br>
Jak wiadomo polityka zabezpieczeń appletów jest słusznie bardzo ograniczona:</p>


<ul>
<li>brak możliwości korzystania z lokalnego systemu plików</li>
<li>możliwość podłączenia jedynie z serwerem z appletem</li>
</ul>


<p>Okazuje się, że aby korzystać w applecie z zewnętrznych danych wystarczy skorzystać z <i>zasobów</i>. Pozwalają na odwoływanie się do systemu plików względem ścieżki w której znajduje się wykonywany plik .class:</p>


<p></p>


<p><code>java
InputStream in = getClass().getResourceAsStream("obrazy/czolg1.png");
</code></p>
]]></content>
  </entry>
  
</feed>
